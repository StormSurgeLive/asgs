#!/usr/bin/env bash
# xxx THIS FILE IS GENERATED BY asgs-brew.pl                                           xxx
# xxx DO NOT CUSTOMIZE THIS FILE, IT WILL BE OVERWRITTEN NEXT TIME asgs-brew.pl IS RUN xxx

# This file is part of the ADCIRC Surge Guidance System (ASGS).
#
# The ASGS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ASGS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the ASGS.  If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------

# Developer Note:
# This must remain consistent with what's exported by asgs-brew.pl, and
# vice versa; if something is added in set(), be sure to add the
# corresponding entry in show() - including usage

export PS1='asgs (none)>'
echo
echo "Quick start:"
echo "  'initadcirc' to build and local register versions of ADCIRC"
echo "  'list profiles' to see what scenario package profiles exist"
echo "  'list adcirc' to see what builds of ADCIRC exist"
echo "  'load <profile_name>' to load saved profile"
echo "  'run' to initiated ASGS for loaded profile"
echo "  'help' for full list of options and features"
echo "  'exit' to return to the login shell"
echo
echo "NOTE: This is a fully function bash shell environment; to update asgsh"
echo "or to recreate it, exit this shell and run asgs-brew.pl with the"
echo " --update-shell option"
echo

help() {
  echo
  echo Commands:
  echo "   delete <name>              - deletes named profile"
  echo "   edit  config  <name>       - directly edit currently registered ASGS configuration file (used by asgs_main.sh)"
  echo "      *  adcirc  <name>       - directly edit the named ADCIRC environment file"
  echo "      *  profile <name>       - directly edit the named ASGSH Shell profile"
  echo "   goto   <param>             - change current working directory to a supported direcory; type 'goto options' to see the currently supported options"
  echo "   initadcirc                 - interactive tool for building and local registering versions of ADCIRC for use with ASGS"
  echo "   list   <param>             - lists different things, please see the following options; type 'list options' to see currently supported options"
  echo "   load   <param>             - loads different things into the environment"
  echo "          profile <name>      - loads a saved profile by name; use 'list profiles' to see what's available"
  echo "          adcirc  <name>      - loads information about the version of ADCIRC to us into the current environment. Use 'list adcirc' to see what's available"
  echo "   run                        - runs asgs using config file, \$ASGS_CONFIG must be set (see 'set config'); most handy after 'load'ing a profile"
  echo "   save  <name>               - saves an asgs named profile, '<name>' not required if a profile is loaded"
  echo "   set    <param> \"<value>\" - sets specified profile variables (i.e., variables that do not last after 'exit')"
  echo "       *  config              - sets ASGS configuration file used by 'run', (\$ASGS_CONFIG)"
  echo "       *  editor              - sets default editor, (\$EDITOR)"
  echo "       *  scratchdir          - sets ASGS main script directory used by all underlying scripts, (\$SCRATCH)"
  echo "       *  scriptdir           - sets ASGS main script directory used by all underlying scripts, (\$SCRIPTDIR)"
  echo "       *  workdir             - sets ASGS main script directory used by all underlying scripts, (\$WORK)"
  echo "   show   <param>             - shows specified profile variables, to see current list type 'show help'"
  echo "   show   exported            - dumps all exported variables and provides a summary of what asgsh tracks"
  echo "   sq                         - shortcut for \"squeue -u \$USER\" (if squeue is available)"
  echo "   verify                     - verfies Perl and Python environments"
  echo "   watchlog                   - executes 'tail -f' on ASGS instance's log"
  echo "   exit                       - exits ASGS shell, returns \$USER to login shell"
}

# runs script to install ADCIRC interactively
initadcirc() {
  init-adcirc.sh
}

# deletes a saved profile by name
delete() {
  if [ -z "${1}" ]; then
    echo \'delete\' requires a name parameter, does NOT unload current profile 
    return
  fi
  NAME=${1}
  if [ -e "$ASGS_HOME/.asgs/$NAME" ]; then
    rm -f "$ASGS_HOME/.asgs/$NAME"
    echo deleted \'$NAME\'
  else
    echo "no saved profile named '$NAME' was found"
  fi
}

# interactive dialog for choosing an EDITOR if not set
_editor_check() {
  if [ -z "$EDITOR" ]; then
    __DEFAULT_EDITOR=vim
    echo "\$EDITOR is not set. Please set it now (selection updates environment):"
    echo
    echo "Editors available via PATH"
    for e in vim nano vi; do
      full=$(which `basename $e`)
      echo "- $e	(full path: $full)"
    done 
    read -p "Choose [vim]: " _DEFAULT_EDITOR
    if [ -z "$_DEFAULT_EDITOR" ]; then
      _DEFAULT_EDITOR=$__DEFAULT_EDITOR
    fi
    set editor "$_DEFAULT_EDITOR"
    echo
  fi
}

# opens up $EDITOR to directly edit files defined by the case
# statement herein
edit() {
  # if it's not set
  _editor_check

  # dispatch subject of edit command
  case "${1}" in
  adcirc)
    BRANCH=${2}
    if [ ! -e "$ADCIRC_META_DIR/$BRANCH" ]; then
      echo "An ADCIRC environment named '$BRANCH' doesn't exist"
      return
    fi
    $EDITOR "$ADCIRC_META_DIR/$BRANCH"
    ;;
  config)
    if [ -z "$ASGS_CONFIG" ]; then
      echo "\$ASGS_CONFIG is not set. Use 'set config' to specify an ASGS config file."
      return
    fi
    $EDITOR $ASGS_CONFIG
    ;;
  profile)
    NAME=${2}
    if [ ! -e "$ASGS_HOME/.asgs/$NAME" ]; then
      echo "An ASGS profile named '$NAME' doesn't exist"
      return
    fi
    $EDITOR "$ASGS_HOME/.asgs/$NAME"
    ;;
  *)
    echo "Supported options:"
    echo "adcirc <name>  - directly edit named ADCIRC environment file"
    echo "config         - directly edit ASGS_CONFIG, if set"
    echo "profile <name> - directly edit named ASGS profile (should be followed up with the 'load profile' command"
    ;;
  esac
}

# change to a directory know by asgsh
goto() {
  case "${1}" in
    adcircworkdir)
    if [ -e "$ADCIRCDIR/work" ]; then
      cd $ADCIRCDIR/work
      pwd
    else
      echo 'ADCIRCDIR not yet defined'
    fi 
    ;;
    adcircdir)
    if [ -e "$ADCIRCDIR" ]; then
      cd $ADCIRCDIR
      pwd
    else
      echo 'ADCIRCDIR not yet defined'
    fi 
    ;;
  rundir)
    if [ -e "$RUNDIR" ]; then
      cd $RUNDIR
      pwd
    else
      echo 'rundir not yet defined'
    fi 
    ;;
  scratchdir)
    if [ -e "$SCRATCH" ]; then
      cd $SCRATCH
      pwd
    else
      echo 'scratchdir not yet defined'
    fi 
    ;;
  scriptdir)
    if [ "$SCRIPTDIR" ]; then
      cd $SCRIPTDIR
      pwd
    else
      echo 'scriptdir not yet defined'
    fi 
    ;;
  workdir)
    if [ "$WORK" ]; then
      cd $WORKDIR
      pwd
    else
      echo 'workdir not yet defined'
    fi 
    ;;
  *)
    echo "Only 'adcircdir', 'rundir', 'scratchdir', 'scriptdir', and 'workdir' are supported at this time."
    ;;
  esac
}

# list interface for lists of important things (registered ADCIRC builds, ASGS profiles)
list() {
  case "${1}" in
    adcirc)
      if [ ! -d "$ADCIRC_META_DIR/" ]; then
        echo "nothing is available to list, run 'initadcirc' to build and register a version of ADCIRC"
      else
        for adcirc in $(ls -1 "$ADCIRC_META_DIR/" | sort); do
          echo "- $adcirc"
        done
        return
      fi
      ;;
    configs)
      read -p "Show configs for what year? " year
      if [ -d $SCRIPTDIR/config/$year ]; then
        ls $SCRIPTDIR/config/$year/* | less
      else
        echo ASGS configs for $year do not exist 
      fi
      ;;
    profiles)
      if [ ! -d "$ASGS_HOME/.asgs/" ]; then
        echo "nothing is available to list, use the 'save' command to save this profile"
      else
        for profile in $(ls -1 "$ASGS_HOME/.asgs/" | sort); do
          echo "- $profile"
        done
        return
      fi
      ;;
    *)
      echo "only 'list configs' and 'list profiles' are supported at this time.'"
      ;;
  esac 
}

# load environment related things like an ADCIRC environment or saved ASGS environment
load() {
  case "${1}" in
    adcirc)
      if [ -z "${2}" ]; then
        echo "'load' requires a name parameter, use 'list adcirc' to list available ADCIRC builds"
        return
      fi
      BRANCH=${2}
      if [ -e "${ADCIRC_META_DIR}/${BRANCH}" ]; then
          # source it
          . ${ADCIRC_META_DIR}/${BRANCH}
      else
          echo "ADCIRC build, '$BRANCH' does not exist. Use 'list adcirc' to see a which ADCIRCs are available to load"
      fi
      ;;
    profile)
      if [ -z "${2}" ]; then
        echo "'load' requires a name parameter, use 'list profiles' to list saved profiles"
        return
      fi
      NAME=${2}
      if [ -e "$ASGS_HOME/.asgs/$NAME" ]; then
        . "$ASGS_HOME/.asgs/$NAME"
        export PS1="asgs ($NAME)> "
        echo loaded \'$NAME\' into current profile;
        if [ -n "$ASGS_CONFIG" ]; then
          # extracts info such as 'instancename' so we can derive the location of the state file, then the log file path and actual run directory
          _parse_config $ASGS_CONFIG
        fi
      else
        echo "ASGS profile, '$NAME' does not exist. Use 'list profile' to see a which profile are available to load"
      fi
      ;;
    *)
      echo "'load' requires 2 parameters: 'adcirc' or 'profile' as the first; the second parameter defines what to load."
      return
  esac
}

# when started, ASGS Shell loads the 'default' profile, this can be made variable at some point
load profile default

_parse_config() {
  if [ ! -e "${1}" ]; then
    echo "warning: config file is set, but the file '${1}' does not exist!"
    return
  fi

  # pull out var info the old fashion way...
  INSTANCENAME=$(grep 'INSTANCENAME=' "${1}" | sed 's/^ *INSTANCENAME=//' | sed 's/ *#.*$//g')
  echo "config file found, instance name is '$INSTANCENAME'"

  STATEFILE="$SCRATCH/${INSTANCENAME}.state"
  echo "loading latest state file information from '${STATEFILE}'."

  _load_state_file $STATEFILE
}

_load_state_file() {
  if [ ! -e "${1}" ]; then
    echo "warning: state file '${1}' does not exist! No indication of first run yet?"
    return
  fi

  # we only are about RUNDIR and SYSLOG since they do not change from run to run 
  . $STATEFILE

  if [ -z "$RUNDIR" ]; then
    echo "warning: state file does not contain 'RUNDIR' information. Check again later."
    return
  fi

  if [ -z "$SYSLOG" ]; then
    echo "warning: state file does not contain 'SYSLOG' information. Check again later."
    return
  fi

  echo "... found 'RUNDIR' information, set to '$RUNDIR'"
  echo "... found 'SYSLOG' information, set to '$SYSLOG'"

  PROPERTIESFILE="$RUNDIR/run.properties"

  if [ -e "$PROPERTIESFILE" ]; then
    echo "... found 'run.properties' file, at '$PROPERTIESFILE'"
  fi
}

run() {
  if [ -n "${ASGS_CONFIG}" ]; then
    echo "Running ASGS using the config file, '${ASGS_CONFIG}'"

    # NOTE: asgs_main.sh automatically extracts $SCRIPTDIR based on where it is located;
    # this means that asgs_main.sh will respect $SCRIPTDIR set here by virtue of this capability.
    $SCRIPTDIR/asgs_main.sh -c $ASGS_CONFIG
  else
    echo "ASGS_CONFIG must be set before the 'run' command can be used";  
    return;
  fi
}

# saves environment as a file named what is passed to the command, gets the
# list of environmental variables to save from $_ASGS_EXPORTED_VARS
save() {
  DO_RELOAD=1
  if [ -n "${1}" ]; then 
    NAME=${1}
    DO_RELOAD=0
  elif [ -z "${NAME}" ]; then
    echo "'save' requires a name parameter or pre-loaded profile"
    return
  fi

  if [ ! -d $ASGS_HOME/.asgs ]; then
    mkdir -p $ASGS_HOME/.asgs
  fi

  if [ -e "$ASGS_HOME/.asgs/$NAME" ]; then
    IS_UPDATE=1
  fi

  # generates saved provile as a basic shell resource file that simply
  # includes an 'export' line for each variable asgsh cares about; this
  # is set as part of the shell installation by asgs-brew.pl
  for e in $_ASGS_EXPORTED_VARS; do
    echo "export ${e}='"${!e}"'"  >> "$ASGS_HOME/.asgs/${NAME}.$$.tmp"
  done
  mv "$ASGS_HOME/.asgs/${NAME}.$$.tmp" "$ASGS_HOME/.asgs/${NAME}"
  
  # update prompt so that it's easy to tell at first glance what's loaded
  export PS1="asgs ($NAME)> "

  # print different message based on whether or not the profile already exists
  if [ -n "$IS_UPDATE" ]; then
    echo profile \'$NAME\' was updated
  else
    echo profile \'$NAME\' was written
  fi

  if [ 1 -eq "$DO_RELOAD" ]; then
    load $NAME
  fi
}

# sets the value of various important environmental variables,
# exports them to current session (and are available to be saved)
set() {
  if [ -z "${2}" ]; then
    echo "'set' requires 2 arguments - parameter name and value"
    return 
  fi
  case "${1}" in
    adcircdir)
      export ADCIRCDIR=${2}
      echo "ADCIRCDIR is set to '${ADCIRCDIR}'"
      ;;
    adcircbranch)
      export ADCIRC_GIT_BRANCH=${2}
      echo "ADCIRC_GIT_BRANCH is set to '${ADCIRC_GIT_BRANCH}'"
      ;;
    adcircremote)
      export ADCIRC_GIT_REMOTE=${2}
      echo "ADCIRC_GIT_REMOTE is set to '${ADCIRC_GIT_REMOTE}'"
      ;;
    config)
      export ASGS_CONFIG=${2}
      echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
      ;;
    editor)
      export EDITOR=${2}
      echo "EDITOR is set to '${EDITOR}'"
      ;;
    scriptdir)
      export SCRIPTDIR=${2} 
      echo "SCRIPTDIR is now set to '${SCRIPTDIR}'"
      ;;
    workdir)
      export WORK=${2} 
      echo "WORK is now set to '${WORK}'"
      ;;
    scratchdir)
      export SCRATCH=${2} 
      echo "SCRATCH is now set to '${SCRATCH}'"
      ;;
    *) echo "set requires one of the supported parameters: adcircdir, adcircbranch, adcircremote, config, editor, scratchdir, scriptdir, or workdir"
      ;;
  esac 
}

# prints value of provided variable name
show() {
  if [ -z "${1}" ]; then
    echo "'set' requires 1 argument - parameter"
    return 
  fi
  case "${1}" in
    config)
      if [ -n "${ASGS_CONFIG}" ]; then
        echo "ASGS_CONFIG is set to '${ASGS_CONFIG}'"
      else
        echo "ASGS_CONFIG is not set to anything. Try, 'set config /path/to/asgs/config.sh' first"
      fi
      ;;
    adcircdir)
      if [ -n "${ADCIRCDIR}" ]; then
        echo "ADCIRCDIR is set to '${ADCIRCDIR}'"
      else
        echo "ADCIRCDIR is not set to anything. Try, 'set adcircdir /path/to/adcirc/dir' first"
      fi
      ;;
    adcircbranch)
      if [ -n "${ADCIRC_GIT_BRANCH}" ]; then
        echo "ADCIRC_GIT_BRANCH is set to '${ADCIRC_GIT_BRANCH}'"
      else
        echo "ADCIRC_GIT_BRANCH is not set to anything. Try, 'set adcircbranch git-branch-tag-or-sha' first"
      fi
      ;;
    adcircremote)
      if [ -n "${ADCIRC_GIT_REMOTE}" ]; then
        echo "ADCIRC_GIT_REMOTE is set to '${ADCIRC_GIT_REMOTE}'"
      else
        echo "ADCIRC_GIT_REMOTE is not set to anything. Try, 'set adcircremote https://|ssh://adcirc-remote-url' first"
      fi
      ;;
    machinename)
      if [ -n "${ASGS_MACHINE_NAME}" ]; then
        echo "ASGS_MACHINE_NAME is set to '${ASGS_MACHINE_NAME}'"
      else
        echo "ASGS_MACHINE_NAME is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    adcirccompiler)
      if [ -n "${ADCIRC_COMPILER}" ]; then
        echo "ADCIRC_COMPILER is set to '${ADCIRC_COMPILER}'"
      else
        echo "ADCIRC_COMPILER is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    asgscompiler)
      if [ -n "${ASGS_COMPILER}" ]; then
        echo "ASGS_COMPILER is set to '${ASGS_COMPILER}'"
      else
        echo "ASGS_COMPILER is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    home)
      if [ -n "${ASGS_HOME}" ]; then
        echo "ASGS_HOME is set to '${ASGS_HOME}'"
      else
        echo "ASGS_HOME is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    installpath)
      if [ -n "${ASGS_INSTALL_PATH}" ]; then
        echo "ASGS_INSTALL_PATH is set to '${ASGS_INSTALL_PATH}'"
      else
        echo "ASGS_INSTALL_PATH is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    brewflags)
      if [ -n "${ASGS_BREW_FLAGS}" ]; then
        echo "ASGS_BREW_FLAGS is set to '${ASGS_BREW_FLAGS}'"
      else
        echo "ASGS_BREW_FLAGS is not set to anything. This should have been set via asgs-brew.pl."
      fi
      ;;
    editor)
      if [ -n "${EDITOR}" ]; then
        echo "EDITOR is set to '${EDITOR}'"
      else
        echo "EDITOR is not set to anything. Try, 'set config vi' first"
      fi
      ;;
    exported)
      for e in $_ASGS_EXPORTED_VARS; do
      echo "${e}='"${!e}"'"
      done
      echo Summary list of environmental variables exported by asgsh:
      echo $_ASGS_EXPORTED_VARS
      ;;
    instancename)
      if [ -n "${INSTANCENAME}" ]; then
        echo "INSTANCENAME is set to '${INSTANCENAME}'"
      else
        echo "INSTANCENAME is not set to anything. Have you set the config file yet?"
      fi
      ;;
    rundir)
      if [ -n "${RUNDIR}" ]; then
        echo "RUNDIR is set to '${RUNDIR}'"
      else
        echo "RUNDIR is not set to anything. Does state file exist?" 
      fi
      ;;
    scratchdir)
      if [ -n "${SCRATCH}" ]; then
        echo "SCRATCH is set to '${SCRATCH}'"
      else
        echo "SCRATCH is not set to anything. Try, 'set config /path/to/scratch' first"
      fi
      ;;
    scriptdir)
      if [ -n "${SCRIPTDIR}" ]; then
        echo "SCRIPTDIR is set to '${SCRIPTDIR}'"
      else
        echo "SCRIPTDIR is not set to anything. Try, 'set config /path/to/asgs' first"
      fi
      ;;
    statefile)
      if [ -n "${STATEFILE}" ]; then
        echo "STATEFILE is set to '${STATEFILE}'"
      else
        echo "STATEFILE is not set to anything. Does state file exist?"
      fi
      ;;
    syslog)
      if [ -n "${SYSLOG}" ]; then
        echo "SYSLOG is set to '${SYSLOG}'"
      else
        echo "SYSLOG is not set to anything. Does state file exist?"
      fi
      ;;
    workdir)
      if [ -n "${WORK}" ]; then
        echo "WORK is set to '${WORK}'"
      else
        echo "WORK is not set to anything. Try, 'set config /path/to/work' first"
      fi
      ;;
    *) echo "'show' requires one of the supported parameters:"
       echo config adcircdir adcircbranch adcircremote machinename adcirccompiler asgscompiler home
       echo installpath brewflags editor instancename rundir scratchdir scriptdir statefile syslog
       echo workdir
      ;;
  esac 
}

# short cut to report current work queue status
sq() {
  if [ -n $(which squeue) ]; then
    squeue -u $USER  
  else
    echo The `squeue` utility has not been found in your PATH \(slurm is not available\)
  fi
}

# short cut to tail -f the SYSLOG of the current ASGS package that is running
watchlog() {
  if [ -z "$SYSLOG" ]; then
    echo "warning: log file "$SYSLOG" does not exist!"
    return
  fi
  echo "type 'ctrl-c' to end"
  echo "tail -f $SYSLOG"
  tail -f $SYSLOG
}

# runs a fairly comprhensive set of Perl and Python scripts to validate
# that these environments are working as expected
verify() {
  echo verifying Perl Environment:
  which perl
  pushd $SCRIPTDIR > /dev/null 2>&1
  perl $SCRIPTDIR/cloud/general/t/verify-perl-modules.t
  echo verifying Perl scripts can pass compile phase \(perl -c\)
  for file in $(find . -name "*.pl"); do perl -c $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file; done
  which python
  python $SCRIPTDIR/cloud/general/t/verify-python-modules.py && echo Python modules loaded ok
  echo verifying Python scripts can pass compile phase \(python -m py_compile\)
  for file in $(find . -name "*.py"); do
    python -m py_compile $file > /dev/null 2>&1 && echo ok     $file || echo not ok $file;
    # clean up potentially useful *.pyc (compiled python) files
    rm -f ${file}c
  done
  echo benchmarking and verifying netCDF4 module functionality
  pyNETCDFBENCH=$SCRIPTDIR/cloud/general/t/netcdf4-bench.py
  $pyNETCDFBENCH && echo ok $pyNETCDFBENCH works || echo not ok $pyNETCDFBENCH 
  pyNETCDFTUTORIAL=$SCRIPTDIR/cloud/general/t/netcdf4-tutorial.py 
  $pyNETCDFTUTORIAL > /dev/null && echo ok $pyNETCDFTUTORIAL works || echo not ok $pyNETCDFTUTORIAL
  # clean up *.nc from netcdf4-tutorial.py
  rm -f ./*.nc
  popd > /dev/null 2>&1
}
