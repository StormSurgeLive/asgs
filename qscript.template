#!/bin/bash
#----------------------------------------------------------------------------
#            Q U E U E   S Y S T E M   D I R E C T I V E S
#----------------------------------------------------------------------------
#PBS -N %jobtype%.%scenario%
#PBS -l walltime=%walltime%
#PBS -l nodes=%nnodes%:ppn=%ppn%
#PBS -q %queuename%
#PBS -A %account%
#PBS -o %advisdir%/%scenario%/%jobtype%.out
#PBS -V
#PBS -j oe
#PBS -m a
#PBS -M %notifyuser%
#SBATCH --job-name="%jobtype%.%scenario%"
#SBATCH --time=%walltime%
#SBATCH --ntasks-per-node=%ppn%
#SBATCH --ntasks=%totalcpu%
#SBATCH --nodes=%nnodes%
#SBATCH --partition=%queuename%
#SBATCH --reservation=%reservation%
#SBATCH --constraint=%constraint%
#SBATCH --account=%account%
#SBATCH --qos=%qos%
#SBATCH --output=%advisdir%/%scenario%/%jobtype%.out
#SBATCH --mail-type=FAIL,TIME_LIMIT
#SBATCH --mail-user=%notifyuser%
echo "------------------------------------------------------------------------"
#
#----------------------------------------------------------------------------
#  I N I T I A L I Z E   D I R E C T O R Y   A N D   F I L E   N A M E S
#----------------------------------------------------------------------------
THIS=%jobtype%.%queuesyslc%  # name of this script for use in log messages
SCRIPTDIR=%scriptdir%
SYSLOG=%syslog%
CYCLEDIR=%advisdir%
CYCLE=$(basename %advisdir%)
CYCLELOG=$CYCLEDIR/cycle.log
SCENARIO=%scenario%
SCENARIODIR=$CYCLEDIR/$SCENARIO
SCENARIOLOG=$SCENARIODIR/scenario.log
#
cd $SCENARIODIR 2> >(awk -v this=$THIS -v level=ERROR -f $SCRIPTDIR/monitoring/timestamp.awk | tee -a $SYSLOG | tee -a $CYCLELOG | tee -a $SCENARIOLOG )
#
#----------------------------------------------------------------------------
#  I N I T I A L I Z E   Q U A L I T Y   C H E C K S
#----------------------------------------------------------------------------
#
declare -A netcdfVarName
netcdfVarName["maxele.63.nc"]="zeta_max"
netcdfVarName["fort.63.nc"]="zeta"
netcdfVarName["swan_HS_max.63.nc"]="swan_HS_max"
netcdfVarName["swan_HS.63.nc"]="swan_HS"
netcdfVarName["maxwvel.63.nc"]="wind_max"
netcdfVarName["fort.74.nc"]="windx"
declare -A filesNumDataSets    # number of datasets in each file
#
#----------------------------------------------------------------------------
#        L O G   M E S S A G E S   T O   S T A R T   T H E   J O B
#----------------------------------------------------------------------------
echo "Starting in $SCENARIODIR with %queuesys% Job ID ${%JOBID%}; %queuesys% submit directory ${%JOBDIR%}; and %queuesys% submit host ${%JOBHOST%}."  2>&1 | awk -v this=$THIS -v level=INFO -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG

# record which cluster nodes we have to scenario.log
echo "INFO: $THIS: %JOBNODES%: $%JOBNODES%"   #QUEUEONLY
echo "INFO: $THIS: hostname: "$(hostname)
echo "INFO: $THIS: PATH : $PATH"
echo "INFO: $THIS: LD_LIBRARY_PATH : $LD_LIBRARY_PATH"
#
#----------------------------------------------------------------------------
#               W R I T E   J O B   P R O P E R T I E S
#----------------------------------------------------------------------------
#
if [[ -e "%adcircdir%/../adcirc.bin.buildinfo.json" && ! -e "adcirc.bin.buildinfo.json" ]]; then
   cp "%adcircdir%/../adcirc.bin.buildinfo.json" . 2>> $SYSLOG
   echo "adcirc.file.metadata.build : adcirc.bin.buildinfo.json" >> run.properties
fi
echo "time.hpc.job.%jobtype%.start : $(date +'%Y-%h-%d-T%H:%M:%S%z')" >> $SCENARIO.run.properties
echo "hpc.job.%jobtype%.jobid : ${%JOBID%}" >> $SCENARIO.run.properties
echo "hpc.job.%jobtype%.nodelist : ( %JOBNODES% )" >> $SCENARIO.run.properties                #QUEUEONLY
echo "hpc.job.%jobtype%.hostname : $HOSTNAME" >> $SCENARIO.run.properties                     #QUEUEONLY
echo "hpc.job.%jobtype%.qnnodes : $%JOBNNODES%" >> $SCENARIO.run.properties                   #QUEUEONLY
echo "hpc.job.%jobtype%.qntasks-per-node : $%JOBNTASKSPERNODE%" >> $SCENARIO.run.properties   #QUEUEONLY
echo "hpc.job.%jobtype%.qntasks : $%JOBNTASKS%" >> $SCENARIO.run.properties                   #QUEUEONLY
echo "hpc.job.%jobtype%.joblog : %advisdir%/%scenario%/%jobtype%.out" >> $SCENARIO.run.properties #QUEUEONLY
#
#----------------------------------------------------------------------------
#              L A Y E R   S P E C I F I C A T I O N
#----------------------------------------------------------------------------
#
jobtype="%jobtype%"
createWind10mLayer="%wind10mlayer%"
declare -a layers=( $SCENARIO )
if [[ $createWind10mLayer == "yes" && $jobtype != "partmesh" && $jobtype != "prep20" && $jobtype != "prep13" ]]; then
   layers=( wind10m ${layers[@]} )
fi
#
#----------------------------------------------------------------------------
#                 L O O P   O V E R   L A Y E R S
#----------------------------------------------------------------------------
#

for layer in ${layers[@]}; do
   if [[ -e "fort.15" ]]; then
      rm fort.15 2>> $SCENARIOLOG
   fi
   ln -s ${layer}.fort.15 fort.15 2>> $SCENARIOLOG
   # if this is not a prep job, untar the corresponding fort.15 files
   # and link to the proper meteorological output files
   if [[ ${jobtype:0:4} != "prep" && $jobtype != "partmesh" ]]; then
      # unpack subdomain fort.15 files for use in generating the layer
      tar xvf ${layer}.fort.15.tar 2>> $SCENARIOLOG 2>&1
      # link to empty meteorological output files created in prep phase
      for layerFile in $(ls ${layer}.fort.7* ${layer}.maxwvel* ${layer}.minpr*); do
         if [[ -e ${layerFile#$layer.} ]]; then
            rm ${layerFile#$layer.} 2>> $SCENARIOLOG
         fi
         ln -s $layerFile ${layerFile#$layer.} 2>> $SCENARIOLOG
      done
   fi
   #
   #       E X E C U T E   T H E   J O B
   #
   CMD="%cmd%"
   if [[ $layer == "wind10m" || $SCENARIO == *"Wind10m" ]]; then
      # the met only mode should not be run with the SWAN wave coupled executable
      CMD=$(echo "$CMD" | sed 's?adcswan ?adcirc ?')
   fi
   echo "cycle $CYCLE: $SCENARIO: $jobtype.$layer job ${%JOBID%} starting in $SCENARIODIR with the following command: $CMD" 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
   echo "\"start\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\", \"jobid\" : \"${%JOBID%}\"" > $jobtype.${layer}.run.start # <-OVERWRITE
   echo "\"jobtype\" : \"$jobtype.$layer\", \"submit\" : null, \"jobid\" : \"${%JOBID%}\", \"start\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\", \"finish\" : null, \"error\" : null" >> jobs.status
   $CMD
   ERROVALUE=$?  # capture exit status
   #
   #       C H E C K   S T A T U S   A N D   Q U A L I T Y   O F   R E S U L T S
   #
   ERROMSG=""
   RUNSUFFIX="finish"
   if [ $ERROVALUE -eq 0 ] ; then
      if [[ ${jobtype:0:4} != "prep" && $jobtype != "partmesh" ]]; then
         # look for numerical instability errors in the stdout/stderr files
         for file in adcirc.log $SCENARIOLOG ; do
            if [ -e $file ]; then
               numMsg=$(grep WarnElev $file | wc -l)
               if [ $numMsg = 0 ]; then
                  echo "cycle $CYCLE: $SCENARIO: No numerical instability detected in '$file' after completion of '$jobtype.$layer' job '${%JOBID%}'." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG
               else
                  ERROVALUE=1
                  ERROMSG="$ERROMSG Detected '$numMsg' numerical instability messages in '$file' after completion of '$jobtype.$layer' job '${%JOBID%}'. "
                  RUNSUFFIX="error"
               fi
            fi
         done
         # look for numerical results that indicate an error occurred
         # start by counting the number of nodes in the mesh using the maxele.63.nc file
         np=$(ncks --trd -m -M maxele.63.nc | grep -E -i ": node, size =" | cut -f 7 -d ' ' | tr -d "," | uniq)
         # create a list of files that will be quality checked
         fileList=( )
         if [[ $layer == $SCENARIO && $SCENARIO != *"Wind10m" ]]; then
            fileList=( maxele.63.nc fort.63.nc )
            if [[ $jobtype == "adcswan" || $jobtype == "padcswan" ]]; then
               fileList+=( swan_HS_max.63.nc swan_HS.63.nc )
            fi
         fi
         if [[ -e maxwvel.63.nc ]]; then
            fileList+=( maxwvel.63.nc fort.74.nc )
         fi
         # compile statistics for each file
         for file in ${fileList[@]}; do
            # check that the file exists
            if [[ ! -e $file ]]; then
               filesNumDataSets[$file]=0
               ERROVALUE=1
               ERROMSG="$ERROMSG The '$file' file does not exist, indicating that the '$jobtype.$layer' job with ID '${%JOBID%}' did not finish successfully. "
               RUNSUFFIX="error"
               continue
            fi
            # find number of datasets in the file
            filesNumDataSets[$file]=$(ncks --trd -M $file | grep -E -i "^Root record dimension 0:" | cut -f 10- -d ' ')
            # check for zero records in the file
            if [[ ${filesNumDataSets[$file]} -eq 0 ]]; then
               ERROVALUE=1
               ERROMSG="$ERROMSG The '$file' file contains no data, indicating that the '$jobtype.$layer' job with ID '${%JOBID%}' did not finish successfully. "
               RUNSUFFIX="error"
               continue
            fi
            echo "cycle $CYCLE: $SCENARIO: '$jobtype.$layer' job ID '${%JOBID%}' output file '$file' contains '${filesNumDataSets[$file]}' data set(s). Computing statistics." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
            # compute statistics
            if [[ -e statistics_${file}.txt ]]; then
               rm statistics_${file}.txt
            fi
            # compute min, max, avg, stdev, and number of missing (i.e., dry) values
            # over the full domain for each time step and write to file
            for snap in $(seq 0 $((${filesNumDataSets[$file]} - 1))) ; do
               ncap2 -O -v -s "data[node]=0.0;data.set_miss(-99999.0);data=${netcdfVarName[$file]}($snap:$snap:1,0:$(($np - 1)):1);print(data.min(),\"%f \");print(data.max(),\"%f \");print(data.avg(),\"%f \");print((data-data.avg()).rmssdn(),\"%f \");print(data.number_miss(),\"%d\n\");" $file statistics.nc >> statistics_${file}.txt
            done
         done
         echo "cycle $CYCLE: $SCENARIO: Finished computing statistics for '$jobtype.$layer' job ID '${%JOBID%}' output files." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
         # perform quality checks
         echo "cycle $CYCLE: $SCENARIO: Checking quality of results for '$jobtype.$layer' job ID '${%JOBID%}' output files." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
         for file in ${fileList[@]}; do
            if [[ ${filesNumDataSets[$file]} -eq 0 ]]; then
               continue   # skip checks on files known to be empty
            fi
            # check for NaN values anywhere in the dataset
            nanFound=$(ncks --chk_nan $file)
            if [[ $nanFound == "" ]]; then
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK PASSED: No NaN (not a number) values in output file '$file' for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
            else
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK FAILED: Found NaN (not a number) value(s) in output file '$file'. Failure for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=ERROR -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
               echo $nanFound > "nanFound_$file"
               ERROVALUE=1
               ERROMSG="$ERROMSG QUALITY CHECK FAILED: Found NaN (not a number) value(s) in output file '$file'. Failure for '$jobtype.$layer' job ID '${%JOBID%}'. "
               RUNSUFFIX="error"
            fi
            # the missing and zero quality checks are slightly different for the different file types
            case $file in
            "maxwvel.63.nc"|"fort.74.nc")
               # for wind output, check for any missing values (should not occur)
               numMissing=$(awk '$1==-99999 || $2==-99999 || $3==-99999 || $4==-99999 || $5>0 { print $0 }' statistics_${file}.txt | wc -l)
               # also check for max, avg, or stdev are zero (min can be zero)
               numZero=$(awk '$2==0.0 || $3==0.0 || $4==0.0 { print $0 }' statistics_${file}.txt | wc -l)
               ;;
            "maxele.63.nc"|"fort.63.nc")
               # count the number of nodes that would be considered dry upon cold start based only on negative topobathy value
               numLand=$(ncap2 -O -v -s "land_msk[node]=0.0;land_msk.set_miss(-99999.0);where(depth < 0.0) land_msk=-99999.0; elsewhere land_msk=depth; print(land_msk.number_miss(),\"%d\n\");" $file statistics.nc)
               # water level results can contain missing (dry) values, but need to check
               # to see if any of the min, max, avg, or stdev are set to the missing value or zero
               numMissing=$(awk '$1==-99999 || $2==-99999 || $3==-99999 || $4==-99999  { print $0 }' statistics_${file}.txt | wc -l)
               # also check to see if the number of missing values is greater than the number of coldstart dry values
               compareDry=$(awk '$5>$numLand { print $0 }' statistics_${file}.txt | wc -l)
               # just a warning
               if [[ $compareDry -gt 0 ]]; then
                  echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK WARNING: There are more dry values in '$compareDry' datasets in the '$file' file than the total number of negative topobathy depths ('$numLand') in the mesh for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=WARN -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
               fi
               # also check for min, max, avg, or stdev set to zero
               numZero=$(awk '$1==0.0 || $2==0.0 || $3==0.0 || $4==0.0 { print $0 }' statistics_${file}.txt | wc -l)
               ;;
            "swan_HS_max.63.nc"|"swan_HS.63.nc")
               # wave height results should not have zero or the missing value in summary statistics (min can be zero)
               numMissing=$(awk '$1==-99999 || $2==-99999 || $3==-99999 || $4==-99999 { print $0 }' statistics_${file}.txt | wc -l)
               # also check for max, avg, or stdev are zero (min can be zero)
               numZero=$(awk '$2==0.0 || $3==0.0 || $4==0.0 { print $0 }' statistics_${file}.txt | wc -l)
               ;;
            *)
               # should be unreachable
               ;;
            esac
            if [[ $numMissing -eq 0 ]]; then
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK PASSED: Missing values (-99999) OK in output file '$file' for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
            else
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK FAILED: Missing values (-99999) NOT OK in '$numMissing' dataset(s) of output file '$file'. Failure for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=ERROR -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
               ERROVALUE=1
               ERROMSG="$ERROMSG QUALITY CHECK FAILED: Missing values (-99999) NOT OK in output file '$file'. Failure for '$jobtype.$layer' job ID '${%JOBID%}'. "
               RUNSUFFIX="error"
            fi
            if [[ $numZero -eq 0 ]]; then
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK PASSED: No zero values in summary statistics in output file '$file' for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
            else
               echo "cycle $CYCLE: $SCENARIO: QUALITY CHECK FAILED: Found '$numZero' datasets with zero values for summary statistics of output file '$file', which should not occur. Failure for '$jobtype.$layer' job ID '${%JOBID%}'." 2>&1 | awk -v level=ERROR -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
               ERROVALUE=1
               ERROMSG="$ERROMSG QUALITY CHECK FAILED: Found '$numZero' datasets with zero values for summary statistics of output file '$file', which should not occur. Failure for '$jobtype.$layer' job ID '${%JOBID%}'. "
               RUNSUFFIX="error"
            fi
         done
      fi
   else
      ERROMSG="$ERROMSG The $jobtype.$layer job ended with an exit status that indicates an error occurred. "
      RUNSUFFIX="error"
   fi
   #
   echo "cycle $CYCLE: $SCENARIO: $jobtype.$layer job ID '${%JOBID%}' finished in $SCENARIODIR with return value = $ERROVALUE" 2>&1 | awk -v level=INFO -v this=$THIS -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
   #
   #     R E P O R T   J O B   S T A T U S
   #
   if [ $ERROVALUE != 0 ]; then
      echo "cycle $CYCLE: $SCENARIO: $THIS: $ERROMSG" 2>&1 | awk -v this=$THIS -v level=ERROR -f $SCRIPTDIR/monitoring/timestamp.awk | tee --append $SCENARIOLOG | tee --append $CYCLELOG | tee --append $SYSLOG
      echo "\"$RUNSUFFIX\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\", \"message\" : \"$ERROMSG\"" > $jobtype.${layer}.run.${RUNSUFFIX}  # <-OVERWRITE
      echo "\"jobtype\" : \"$jobtype.$layer\", \"submit\" : null, \"jobid\" : \"${%JOBID%}\", \"start\" : null, \"finish\" : null, \"error\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\"" >> jobs.status
   else
      echo "\"jobtype\" : \"$jobtype.$layer\", \"submit\" : null, \"jobid\" : \"${%JOBID%}\", \"start\" : null, \"finish\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\", \"error\" : null" >> jobs.status
      echo "\"$RUNSUFFIX\" : \"$(date +'%Y-%h-%d-T%H:%M:%S%z')\"" > $jobtype.${layer}.run.$RUNSUFFIX
   fi
   echo "time.hpc.job.$jobtype.$layer.${RUNSUFFIX} : $(date +'%Y-%h-%d-T%H:%M:%S%z')" >> $SCENARIO.run.properties
   echo "-----------------------------------------------------------------------"
   #
   # if this is a prepall or prep15 job, tar up the subdomain fort.15 files
   # and copy the meteorological output files to their own filenames
   #
   if [[ $jobtype == "prepall" || $jobtype == "prep15" ]]; then
      tar cvf ${layer}.fort.15.tar PE*/fort.15 2>>$SYSLOG 2>&1
      rm PE*/fort.15 2>> $SYSLOG
      for file in $(ls fort.7* maxwvel* minpr*); do
         mv $file ${layer}.$file
      done
   fi
done
#
# finalize by setting the symbolic links for the fort.15 file and
# the meteorology output files to the full output
# (i.e., those that include wind reduction)
if [[ -e "fort.15" ]]; then
   rm fort.15 2>> $SCENARIOLOG
fi
ln -s $SCENARIO.fort.15 fort.15 2>> $SCENARIOLOG
#
for file in $(ls fort.7* maxwvel* minpr*); do
   if [[ -e $file ]]; then
      rm $file 2>> $SCENARIOLOG
   fi
done
for file in $(ls ${SCENARIO}.fort.7* ${SCENARIO}.maxwvel* ${SCENARIO}.minpr*); do
   ln -s $file ${file#$SCENARIO.} 2>> $SCENARIOLOG
done
