#!/bin/bash
# Specify the queue explicitly
#PBS -q %queuename%
# Specify email address
#PBS -M %notifyuser%
# Specify number of cpus in a machine-specific way
#PBS -l nodes=%nnodes%:ppn=%ppn%
# Specify the wall clock time
#PBS -l walltime=%walltime%
# Merge stderr to stdout (optional, otherwise they're in separate files)
#PBS -j oe
# Name the job (this will appear in the output from the qstat command)
#PBS -N %enstorm%
# Specify the output filename explicitly (optional; the default is named
# from the job ID, in the directory where qsub was run.)
#PBS -o %advisdir%/%enstorm%/%jobtype%.%enstorm%.out
# Specify the account that the time should be taken from 
#PBS -A %account%
#PBS -V
#---------------------------------------------------------------------
# The directory to start in 
cd %advisdir%/%enstorm%
# These are the actual commands to be executed.
DATETIME=`date +'%Y-%h-%d-T%H:%M:%S'`
echo "[${DATETIME}] : %jobtype% starting in %advisdir%/%enstorm%." >> %jobtype%.%enstorm%.run.start
echo "%jobtype% job starting at $DATETIME."
mpirun -np %ncpu% -machinefile $PBS_NODEFILE %adcircdir%/%jobtype% %cloptions% > %jobtype%.%enstorm%.stdout.stderr 2>&1
ERROVALUE=$?
DATETIME=`date +'%Y-%h-%d-T%H:%M:%S'`
if [ $ERROVALUE == 0 ] ; then
   RUNSUFFIX="finish"
else
   RUNSUFFIX="error"
fi
echo "[${DATETIME}] : %jobtype%.%enstorm% finished in %advisdir%/%enstorm% with return value = $ERROVALUE" > %jobtype%.%enstorm%.run.${RUNSUFFIX}
echo "Job finished at $DATETIME."
# You don't need anything special at the end of the script.
