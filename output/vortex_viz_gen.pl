#!/usr/bin/env perl
#---------------------------------------------------------------------
# vortex_viz_gen.pl
#---------------------------------------------------------------------
#
# Copyright(C) 2011 Jason Fleming
# 
# This file is part of the ADCIRC Surge Guidance System (ASGS).
# 
# The ASGS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# ASGS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with the ASGS.  If not, see <http://www.gnu.org/licenses/>.
#
#---------------------------------------------------------------------
#
use strict;
use Getopt::Long;
use Date::Pcalc;
use Cwd;
$^W++;

my $dir=".";                        # path to input and output files
my $storm;                          # number, e.g., 05 or 12 
my $year;                           # YYYY
my $coldstartdate;                  # YYYYMMDDHH24
my $input="NWS_19_fort.22";         # name of input file
my $output="plot_radii.sh";         # gmt script file
my $hotstartseconds = 0.0;          # default is not hotstart
my $nws = 8;                        # the ADCIRC wind model to target
my $name = "nhcConsensus";          # default track to generate
my $percent;                        # magnitude of parameter variation
my $advisorynum="30";
my $strengthPercent = 20.0;
my $overlandSpeedPercent = -20.0;
my $sizePercent = 20.0;
my $veerPercent = 100.0;
my $pi=3.141592653589793;
# if the NHC issues a special advisory, there may be incomplete lines in the 
# hindcast file. This hash will save the most recent complete lines, to fill
# in any missing data.
my %complete_hc_lines = ();
my $nhcName;  # NHC's current storm name (IKE, KATRINA, INVEST, ONE, etc)
my $stormClass; # NHC's current storm classification (TD, TS, HU, IN, etc)
#
#
GetOptions(
           "dir=s" => \$dir,
           "storm=s" => \$storm,
           "year=s" => \$year,
           "coldstartdate=s" => \$coldstartdate,
           "hotstartseconds=s" => \$hotstartseconds,
           "nws=s" => \$nws,
           "name=s" => \$name,
           "percent=s" => \$percent,
           "advisorynum=s" => \$advisorynum
           );
#
# open NWS19 fort.22 file
unless (open(FORT22,"<$dir/$input")) {
   stderrMessage("ERROR","Failed to open NWS19 fort.22 file $dir/$input for reading: $!.");
   die;
}
#
# create the gmt script file
unless (open(GMTSCRIPT,">$dir/$output")) {
   stderrMessage("ERROR","Failed to open gmt script file '$dir/$output' for writing: $!.");
   die;
}
#
# add header to gmt script
printf GMTSCRIPT "#!/bin/sh\n";
printf GMTSCRIPT "# generated by gmt_script_gen.pl to plot wind radii for NWS19\n";
printf GMTSCRIPT "gmtset PAPER_MEDIA letter\n";
#
# add code to plot wind radii in successive plots ... each plot will be
# on its own page (to be combined into a single document in a later step
# using psmerge and then placed together, 6 to a page, using psnup)
printf GMTSCRIPT "#\n# now plot wind radii\n";
my $cycle_num=0;
my $previous_hour=-1;
my @isotachs_per_cycle;
my @type;
my @time;
my @vmax;
my @nhc_rmax;
my @B;
my @pc;
my $stormname;
while (<FORT22>) { 
   # break into fields 
   my @fields = split(',',$_);
   # grab hour
   my $hour=$fields[5];
   if ( $hour != $previous_hour ) { 
      $cycle_num++;
      $isotachs_per_cycle[$cycle_num] = 1;
      $fields[4] =~ /([A-Z]{4})/;
      $type[$cycle_num] = $1;
      $fields[2] =~ /(\d{4})(\d{2})(\d{2})(\d{2})/;
      $time[$cycle_num] = $4."Z ".$2."/".$3."/".$1;    
      $fields[8] =~ /(\d+)/;
      $vmax[$cycle_num] = $1;
      $fields[19] =~ /(\d+)/;
      $nhc_rmax[$cycle_num] = $1;
      $fields[38] =~ /(\d{1}+\.\d+)/;
      $B[$cycle_num] = $1;
      $fields[9] =~  /(\d+)/;
      $pc[$cycle_num] = $1;
      $fields[27] =~ /([A-Z]+)/;
      $stormname = $1;
   } else {
      $isotachs_per_cycle[$cycle_num]++;
   }
   $previous_hour = $hour; 
   # grab isotach speed 
   $fields[11] =~ /(\d\d)/;
   my $speed=$1;
   # grab radii and write to file with isotach speed and cycle number for gmt
   my $ne=$fields[13];
   my $se=$fields[14];
   my $sw=$fields[15];
   my $nw=$fields[16];
   my $radii_file_name = "radii_" . $speed . "kt_" . sprintf("cycle%02d",$cycle_num) . ".d";
   unless (open(RADIUSDATA,">$dir/$radii_file_name")) {
      stderrMessage("ERROR","Failed to open gmt script file '$dir/$radii_file_name' for writing: $!.");
      die;
   }
   printf RADIUSDATA "$ne 45\n";
   printf RADIUSDATA "$se 135\n";
   printf RADIUSDATA "$sw 225\n";
   printf RADIUSDATA "$nw 315\n";
   close(RADIUSDATA);
} 
#
# now that we know how many isotachs are in each cycle, we can create the 
# gmt script code to plot them
my @isotach_speeds = ( 34, 50, 64 ); 
my @isotach_colors = qw( green purple yellow ); 
my $extents = "-R0/400/0/360";
my $offset = "-Xa2.5i -Ya3.5i";
for (my $cycle=1; $cycle<=$cycle_num; $cycle++ ) {
   printf GMTSCRIPT "#\n# plots for isotachs of cycle $cycle\n";
   my $radii_plot_name = sprintf("radii_cycle%02d.ps",$cycle);
   my $full_circle_data_file = sprintf("full_circle_rmaxes_%02d.d",$cycle);
   for (my $isotach=1; $isotach<=$isotachs_per_cycle[$cycle]; $isotach++ ) {
      printf GMTSCRIPT "# plot $isotach_speeds[$isotach-1] kt isotach\n";
      my $radii_file_name = "radii_" . $isotach_speeds[$isotach-1] . "kt_" . sprintf("cycle%02d",$cycle) . ".d";
      my $kontinue="";
      my $append="";
      my $redirect=">";
      if ( $isotach < $isotachs_per_cycle[$cycle] 
           || -e $full_circle_data_file ) {
         $kontinue="-K";
      } 
      if ( $isotach > 1 ) {
         $append="-O";
         $redirect=">>";
      }
      #
      # info string = [a|f|g]stride[+-phase][unit]
      # ?info segment = info[:"Axis label":][:="prefix":][:,"unit label":]
      # -B[p|s]xinfo[/yinfo[/zinfo]][:."Title":][W|w][E|e][S|s][N|n][Z|z[+]]
      # To specify separate x and y ticks, separate the substrings that apply to the x and y axes with a slash [/]
      # radius increment and annotations
      my $info = "g100";
      my $segment = ":::,\"nm\":";
      my $xinfo = $info.$segment;
      # azimuth increment and annotations
      $info = "g90";
      my $ylabel = "B=$B[$cycle], Vmax=$vmax[$cycle]kt, Pc=$pc[$cycle]mb";
      if ( $type[$cycle] eq "BEST" ) {
         $ylabel .= ", NHC Rmax=$nhc_rmax[$cycle]nm";   
      }
      $segment = ":\"$ylabel\":";
      my $yinfo = $info.$segment;
      # title 
      my $title = ":.\"$stormname$advisorynum $type[$cycle] $time[$cycle]\":";
      my $ticks = "-B".$xinfo."/".$yinfo.$title;
      printf GMTSCRIPT "psrose $radii_file_name $kontinue $append -P -A90 -S2i $extents $offset -G$isotach_colors[$isotach-1] -Wthickest -V $ticks -L $redirect $radii_plot_name\n";
   }
   if ( -e $full_circle_data_file ) {
      printf GMTSCRIPT "# convert from trigonometric azimuth to compass\n";
      printf GMTSCRIPT "# azimuth and switch radius and azimuth columns\n";
      printf GMTSCRIPT "awk '{ \$2=90-\$2; if (\$2<0) \$2=\$2+360; print \$2\" \"\$1 }' $full_circle_data_file > compass_$full_circle_data_file\n"; 
      printf GMTSCRIPT "# now plot the fitted Rmax values\n";
      printf GMTSCRIPT "psxy compass_$full_circle_data_file -JP4i -O -P -A -Xa2.5i -Ya3.5i -R0/360/0/400 -Wfat,red -V >> $radii_plot_name\n";
   } else {
      stderrMessage("INFO","Could not find $full_circle_data_file.");
   }
}
#
# clean up gmt history
printf GMTSCRIPT "# clean up gmt history\n";
printf GMTSCRIPT "rm -f .gmt*\n";
#
# NEW GMT PLOT
# add code to pull out storm center locations
printf GMTSCRIPT "#\n# extract x y locations of unique storm positions to centers.d file\n";
printf GMTSCRIPT "awk 'BEGIN { FS=\",\"; hours=-1; } hours!=\$6 { hours=\$6 ; print -\$8/10\" \"\$7/10 }' $dir/$input > $stormname\_$advisorynum\_centers.d\n";
#
# add code to plot storm center locations on its own background map
printf GMTSCRIPT "#\n# set up x and y limits of plot rounded by 5 deg\n";
# extents of plot: west, east, south, north
printf GMTSCRIPT "limits=`minmax -I5/5 $stormname\_$advisorynum\_centers.d`\n";
# background map
printf GMTSCRIPT "#\n# create background map for storm centers as follows:\n";
printf GMTSCRIPT "# 6in wide, 5 deg Border incr., portrait, gray colored\n";
printf GMTSCRIPT "# land, Verbose output, the plot will be Kontinued, to\n";
printf GMTSCRIPT "# a file centers_[stormname]_[advisory].ps.\n";
printf GMTSCRIPT "pscoast \$limits -JM6i -B5:.\"$stormname $advisorynum\": -P -Ggray -V -K > centers_$stormname\_$advisorynum.ps\n";
# crosses
printf GMTSCRIPT "#\n# the cross is made of a vertical line and a horizontal\n";
printf GMTSCRIPT "# line, so psxy has to be called twice.\n";
printf GMTSCRIPT "# The -O indicates that the plot is continued.\n";
printf GMTSCRIPT "psxy -O -K -R -J $stormname\_$advisorynum\_centers.d -S-0.1i -Wthick >> centers_$stormname\_$advisorynum.ps\n";
printf GMTSCRIPT "psxy -R -J -O -K $stormname\_$advisorynum\_centers.d -Sy0.1i -Wthick >> centers_$stormname\_$advisorynum.ps\n";
if ( -e "full_circle_latlon_01.d" ) {
   for (my $cycle=1; $cycle<=$cycle_num; $cycle++ ) {
      my $kontinue="-K";
      if ( $cycle==$cycle_num && !-e "radialvp_latlon_01.d" ) {
         $kontinue="";
      }
      printf GMTSCRIPT sprintf("psxy -R -J -O $kontinue full_circle_latlon_%02d.d -Sp -Wthin >> centers_$stormname\_$advisorynum.ps\n",$cycle);
   }
} else {
   stderrMessage("INFO","Could not find full_circle_latlon_01.d.");
}
if ( -e "radialvp_latlon_01.d" ) {
   for (my $cycle=1; $cycle<=$cycle_num; $cycle++ ) {
      my $kontinue="-K";
      if ( $cycle==$cycle_num ) {
         $kontinue="";
      }
      printf GMTSCRIPT sprintf("psxy -R -J -O $kontinue radialvp_latlon_%02d.d -Sp -Wthin >> centers_$stormname\_$advisorynum.ps\n",$cycle);
   }
} else {
   stderrMessage("INFO","Could not find radialvp_latlon_01.d.");
}
# clean up gmt history
printf GMTSCRIPT "# clean up gmt history\n";
printf GMTSCRIPT "rm -f .gmt*\n";
#
# close shell script file for gmt
close(GMTSCRIPT);
#
#
# G N U P L OT
#
# Now generate a gnuplot script for the V(r) and P(r) line graphs  
unless (open(GPSCRIPT,">$dir/radial_v_and_p.gp")) {
   stderrMessage("ERROR","Failed to open gnuplot script file '$dir/radial_v_and_p.gp' for writing: $!.");
   die;
}
printf GPSCRIPT "set terminal postscript color \"Times-Roman\" 14\n";
printf GPSCRIPT "set xlabel \"Distance from Center (nm)\"\n";
printf GPSCRIPT "set grid\n";
printf GPSCRIPT "set style line 1 lt 1 lc rgbcolor \"black\" lw 3\n";
printf GPSCRIPT "set style line 2 lt 1 lc rgbcolor \"dark-orange\" lw 3\n";
printf GPSCRIPT "set style line 3 lt 1 lc rgbcolor \"dark-magenta\" lw 3\n";
printf GPSCRIPT "set style line 4 lt 1 lc rgbcolor \"dark-blue\" lw 3\n";
printf GPSCRIPT "set title  \"$stormname $advisorynum Wind Speed in Each Quadrant\"\n";
printf GPSCRIPT "key top right box\n";
printf GPSCRIPT "set ylabel \"Wind Speed (kt)\"\n";
for (my $cycle=1; $cycle<=$cycle_num; $cycle++ ) {
   my $plot_file_name = sprintf("radialv_%02d.ps",$cycle);
   my $data_file_name = sprintf("radialvp_%02d.d",$cycle);
   printf GPSCRIPT "set output $plot_file_name\n";
   printf GPSCRIPT "plot '$data_file_name' using 1:2 title \"NE Quadrant Wind Speed\" with lines ls 1,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:3 title \"SE Quadrant Wind Speed\" with lines ls 2,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:4 title \"SW Quadrant Wind Speed\" with lines ls 3,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:5 title \"NW Quadrant Wind Speed\" with lines ls 4\n";
}
set title  "IRENE35 Atmospheric Pressure in Each Quadrant"
set ylabel "Sea Level Atmospheric Pressure (mbar)"
set key bottom right box
for (my $cycle=1; $cycle<=$cycle_num; $cycle++ ) {
   my $plot_file_name = sprintf("radialp_%02d.ps",$cycle);
   my $data_file_name = sprintf("radialvp_%02d.d",$cycle);
   printf GPSCRIPT "set output $plot_file_name\n";  
   printf GPSCRIPT "plot '$data_file_name' using 1:6 title \"NE Quadrant P(r)\" with lines ls 1,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:7 title \"SE Quadrant P(r)\" with lines ls 2,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:8 title \"SW Quadrant P(r)\" with lines ls 3,\\\n";
   printf GPSCRIPT "'$data_file_name' using 1:9 title \"NW Quadrant P(r)\" with lines ls 4\n";
}
close(GPSCRIPT);
#
sub stderrMessage () {
   my $level = shift;
   my $message = shift;
   my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
   (my $second, my $minute, my $hour, my $dayOfMonth, my $month, my $yearOffset, my $dayOfWeek, my $dayOfYear, my $daylightSavings) = localtime();
   my $year = 1900 + $yearOffset;
   my $hms = sprintf("%02d:%02d:%02d",$hour, $minute, $second);
   my $theTime = "[$year-$months[$month]-$dayOfMonth-T$hms]";
   printf STDERR "$theTime $level: storm_track_gen.pl: $message\n";
   if ($level eq "ERROR") {
      sleep 60
   }
}


