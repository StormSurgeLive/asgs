#!/usr/bin/env bash

if [ -z "$_ASGSH_PID" ]; then
  SCRIPTDIR=$2
  if [ -z "$SCRIPTDIR" ]; then
    echo "If this script is not run inside of the ASGS Shell Environment, asgsh."
    echo "the path of the SCRIPTDIR must be provided as the second argument ..."
    exit 1;
  fi
fi

# detect git remote protocol of asgs local repo, assume the same
# for all "git clone" calls here - solves issue of there being not
# key set up prior to adcirclive installation
set_gitprotocol_repo() {
  BASEURL="https://github.com/" # terminal character (/) matters 
  local check=$(git remote -v 2> /dev/null | grep -c "git@github")
  if [ "$check" -gt 0 ]; then
    BASEURL="git@github.com:" # terminal character (:) matters
  else
    echo using default https to clone or update repo ...
  fi
}

# this is just a starter, the above stuff might go into a shell "library" at some
# point

set_gitprotocol_repo

ITEM=${1}

case "${ITEM}" in
  all)
    fetch adcirclive-cli
    fetch asgs-lint
    fetch asgs-mon
    fetch configs
    fetch cera
    fetch docs
    fetch ourperl
    fetch storm-archive
    # ...
    fetch adcirc-testsuite
    ;;
  adcirclive-cli)
    pushd $SCRIPTDIR
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./adcirclive-cli ]; then
      cd ./adcirclive-cli  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/adcirclive-cli.git $SCRIPTDIR/git/adcirclive-cli
    fi
    popd > /dev/null 2>&1
    # force this always
    ln -f -s $SCRIPTDIR/git/adcirclive-cli/bin/adcirclive $SCRIPTDIR/bin/adlclient
    ;;
  asgs-lint)
    pushd $SCRIPTDIR
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./asgs-lint ]; then
      cd ./asgs-lint  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/asgs-lint.git $SCRIPTDIR/git/asgs-lint
    fi
    popd > /dev/null 2>&1
    # force this always
    ln -f -s $SCRIPTDIR/git/asgs-lint/bin/asgs-lint $SCRIPTDIR/bin/asgs-lint
    ;;
  asgs-mon)
    build jq                 # helps parse JSON
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./asgs-mon ]; then
      cd ./asgs-mon  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/asgs-mon.git $SCRIPTDIR/git/asgs-mon
    fi
    popd > /dev/null 2>&1
    ;;
  configs)
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./asgs-configs ]; then
      cd ./asgs-configs  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/asgs-configs.git $SCRIPTDIR/git/asgs-configs
    fi
    popd > /dev/null 2>&1
    ;;
  docs)
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./asgs.wiki ]; then
      cd ./asgs.wiki  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/asgs.wiki.git $SCRIPTDIR/git/asgs.wiki
    fi
    popd > /dev/null 2>&1
    ;;
  cera)
    mkdir $SCRIPTDIR/git 2> /dev/null

    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./cera-asgs-environment ]; then
      cd ./cera-asgs-environment  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}CERA-GROUP/cera-asgs-environment.git $SCRIPTDIR/git/cera-asgs-environment
    fi
    popd > /dev/null 2>&1 

    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./cera-asgs-local-assets ]; then
      cd ./cera-asgs-local-assets  > /dev/null  2>&1
      git pull origin main
    else
      git clone ${BASEURL}CERA-GROUP/asgs-local-assets.git $SCRIPTDIR/git/cera-asgs-local-assets
    fi
    popd > /dev/null 2>&1 
    ;;
  ourperl)
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./ourPerl ]; then
      cd ./ourPerl  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/ourPerl.git $SCRIPTDIR/git/ourPerl
    fi
    popd > /dev/null 2>&1
    ;;
  storm-archive)
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./storm-archive ]; then
      cd ./storm-archive  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}StormSurgeLive/storm-archive.git $SCRIPTDIR/git/storm-archive
    fi
    popd > /dev/null 2>&1
    ;;
  adcirc-testsuite)
    mkdir $SCRIPTDIR/git 2> /dev/null
    pushd $SCRIPTDIR/git  > /dev/null  2>&1
    if [ -d ./adcirc-testsuite ]; then
      cd ./adcirc-testsuite  > /dev/null  2>&1
      git pull origin master
    else
      git clone ${BASEURL}adcirc/adcirc-testsuite.git $SCRIPTDIR/git/adcirc-testsuite
    fi
    popd > /dev/null 2>&1
    ;;
  *)
    cat << EOF

'$ITEM' not supported via ASGS' "fetch" command

Rerunning the command will update the repo if possible.

 Supported:
  * adcirc-testsuite - git clones ADCIRC's test-suite                (public)
  * adcirclive-cli   - git clones ASGS' command line CLI client      (public)
  * asgs-lint        - git clones ASGS' configuration linter         (public)
  * asgs-mon         - git clones ASGS' monitor                      (public)
  * cera             - git clones CERA local-asgs-assets             (private)
  * configs          - git clones ASGS asgs-config                   (public)
  * docs             - git clones ASGS asgs.wiki                     (public)
  * ourperl          - git clones ASGS fork of Nate Dill's "ourPerl" (public)
  * storm-archive    - git clones ASGS storm-archive                 (public)
  --                 ---
  * all              - attempts all of the above

 Example, checkout ASGS configs into, "$SCRIPTDIR/git/asgs-configs":

 asgs> fetch configs

Note: Create a GH issue if there is something missing here that
you think should be added.
EOF
    exit 1
    ;;
esac
